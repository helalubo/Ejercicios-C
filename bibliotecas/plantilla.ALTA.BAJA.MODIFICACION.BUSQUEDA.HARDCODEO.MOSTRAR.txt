
#include "input.h"
#include "validate.h"

#define OCUPADO 1
#define LIBRE 0

//tamanios

#define T 10

#include <string.h>



int cont = 1;


typedef struct
{
    int id;
    char nombre[20];
    char apellido[20];
    char numero[20];
    int estado;

} eAbonado;

/** \brief Hardcodea un listado definido
 *
 * \param listado[] eAbonado donde se carga el hardcodeo
 * \param tam int tamanio del array
 * \return void
 *
 */
void Hardcodeo(eAbonado listado[], int tam);
/** \brief Inicializa un array poniendolo como estado LIBRE 0
 *
 * \param listado[] eAbonado listado a inicializar
 * \param tam int tamanio
 * \return void
 *
 */
void inicializarEstado(eAbonado listado[], int tam);
/** \brief Busca indice libre
 *
 * \param listado[] eAbonado listado donde buscar
 * \param tam int tamanio de listado
 * \return int retorna el indice libre o -1 si todos los indices estan ocupados
 *
 */
int buscarIndiceLibre(eAbonado listado[], int tam);
/** \brief Da de alta una entidad
 *
 * \param listado[] eAbonado listado donde se agregara la entidad
 * \param tam int tamanio de listado
 * \return void
 *
 */
void Alta(eAbonado listado[], int tam);
/** \brief Muestra una entidad
 *
 * \param abonado eAbonado entidad a mostrar
 * \return void
 *
 */
void mostrarAbonado(eAbonado abonado);
/** \brief muestra toda la lista de abonados
 *
 * \param listado[] eAbonado lista a mostrar
 * \param tam int   tamanio de la lista
 * \return void
 *
 */
void mostrarListaDeAbonados(eAbonado listado[],int tam);
/** \brief Busca un legajo/ id
 *
 * \param listado[] eAbonado listado donde buscara
 * \param tam int tamanio de listado
 * \return int retorna posicion en el array donde se encuentra el id o -1 si no lo encuentra.
 *
 */
int buscarLegajo(eAbonado listado[], int tam);
/** \brief Modifica la entidad
 *
 * \param listado[] eAbonado lista donde se encuentra la entidad a modificar
 * \param tam int tamanio de listado
 * \return void
 *
 */
void modificarAbonado(eAbonado listado[], int tam);
/** \brief Da de baja una entidad cambiando su estado de OCUPADO 1 a LIBRE 0
 *
 * \param listado[] eAbonado listado donde buscar entidad
 * \param tam int   tamanio de listado
 * \return void
 *
 */
void baja(eAbonado listado[], int tam);
/** \brief Menu de modificacion de netidades
 *
 * \return void
 *
 */
void menuModificacion();
/** \brief Muestra una entidad ingresando el legajo
 *
 * \param listado[] eAbonado listado donde buscar
 * \param tam int   tamanio de entidad
 * \return int devuelve posicion donde se encuentra el legajo de la entidad o -1 si no la encuentra
 *
 */
int MostrarAbonadoPorLegajo(eAbonado listado[], int tam);

/** \brief Indica la cantidad de abonados en estado ocupado
 *
 * \param listadoAbonados[] eAbonado lista a verificar
 * \param tam int tamanio de listado
 * \return int cantidad de abonados activos
 *
 */
int cantidadDeAbonadosActivos(eAbonado listadoAbonados[],int tam);

int retornarMayor(int numeros[], int cant);


int main()
{

    eAbonado listadoDeAbonados[T];

    inicializarEstado(listadoDeAbonados,T);

    Hardcodeo(listadoDeAbonados,T);
    mostrarListaDeAbonados(listadoDeAbonados,T);

//******************************************************************************************
  //  modificarAbonado(listadoDeAbonados,T);
  //  MostrarAbonadoPorLegajo(listadoDeAbonados,T);
  //  baja(listadoDeAbonados,T);
  //  mostrarListaDeAbonados(listadoDeAbonados,T);



//******************************************************************************************

}
int MostrarAbonadoPorLegajo(eAbonado listado[], int tam){

  int index = buscarLegajo(listado,tam);


    if(index != -1){

    mostrarAbonado(listado[index]);
    }else{

    printf("\nNo existen resultados para la busqueda.\n");
    }



    return index;
}


void Hardcodeo(eAbonado listado[], int tam)
{

    int ids[5] = {1,2,3,4,5};
    char nombres[5][20] = {"Itachi","Sasuke","Naruto","Hinata","Sakura"};
    char apellidos[5][20] = {"Uchiha","Uchiha","Uzumaki","hyuga","Haruno"};
    char numeros[5][20] = {"43033913","43996655","77779999","58851236","43039112"};

    for(int i = 0; i< 5; i++)
    {


        listado[i].id =ids[i];
        strcpy(listado[i].nombre,nombres[i]);
        strcpy(listado[i].apellido,apellidos[i]);
        strcpy(listado[i].numero,numeros[i]);

        listado[i].estado = OCUPADO;

    }


}




void baja(eAbonado listado[], int tam)
{

    int index;
    char rta;

    index = buscarLegajo(listado,tam);


    if(index != -1)
    {

        printf("\n  Legajo encontrado \n ");
        mostrarAbonado(listado[index]);
        rta = verificarSN("\nDesea dar de baja s/n: ");

        if(rta == 's')
        {


            listado[index].estado = LIBRE;


        }
        else
        {

            printf("\n LA BAJA A SIDO ABORTADA.");

        }







    }
    else
    {

        printf("\n LA BAJA A SIDO ABORTADA.");

    }





}

void modificarAbonado(eAbonado listado[], int tam)
{

    int opc;
    int index;
    char auxString[200];


    char rta;

    index = buscarLegajo(listado,tam);





    if(index != -1)
    {



        menuModificacion();
        opc = getInt("\nIngrese opcion: ");


        switch(opc)
        {


        case 1:

            getOnlyLetters(auxString,"\nIngrese nuevo nombre: ","\nNombre invalido");

            rta = verificarSN("\nEsta seguro que desea cambiar el nombre? s/n: ");

            if(rta == 's')
            {


                strcpy(listado[index].nombre,auxString);
                printf("\n Se ha cambiado el valor exitosamente.");

            }
            else
            {

                printf("\nCAMBIO ABORTADO.");
            }



            break;

        case 2:


            getOnlyLetters(auxString,"\nIngrese nuevo apellido: ","\nApellido invalido.");

            rta = verificarSN("\nEsta seguro que desea cambiar el apellido? s/n: ");

            if(rta == 's')
            {

                strcpy(listado[index].apellido,auxString);
                printf("\n Se ha cambiado el valor exitosamente.");

            }
            else
            {

                printf("\nCAMBIO ABORTADO.");
            }
            break;



        default:
            printf("\nOpcion invalida.\n");

        }

    }else{

        printf("\nLegajo no encontrado\n");

    }
}





int buscarLegajo(eAbonado listado[], int tam)
{

    int index  = -1;
    int legajo;
    legajo = getInt("\nIngrese legajo: ");




        for(int i = 0; i<=tam; i++)
        {

            if(listado[i].estado == OCUPADO)
            {

                if(listado[i].id == legajo)
                {


                    index = i;
                    break;


                }



            }


        }








    return index;

}

void mostrarListaDeAbonados(eAbonado listado[],int tam)
{

    printf("%16s%16s%16s%16s\n","Id","Nombre","Apellido","Numero");


    for(int i = 0; i<tam; i++)
    {

        if(listado[i].estado == OCUPADO)
        {

            mostrarAbonado(listado[i]);


        }


    }


}



void mostrarAbonado(eAbonado abonado)
{

    printf("%16d%16s%16s%16s\n",abonado.id,abonado.nombre,abonado.apellido,abonado.numero);






}




void Alta(eAbonado listado[], int tam)
{

    eAbonado aux;
    int index;
    char rta;

    index =  buscarIndiceLibre(listado,tam);

    if(index != -1)
    {



        aux.id = cont++;
        getOnlyLetters( aux.nombre,"\nIngrese nombre: ","\nNombre invalido");
        getOnlyLetters( aux.apellido,"\nIngrese apellido: ","\nNombre invalido");
        getPhoneNumber(aux.numero,"\nIngrese numero telefonico","\nNumero invalido");
        aux.estado = OCUPADO;


        rta = verificarSN("Esta seguro que desea ingresar este abonado? s/n");

        if(rta='s')
        {



            listado[index] = aux;

            printf("\nOperacion exitosa\n");

        }
        else
        {
            printf("\nOperacion cancelada\n");
        }
    }
    else
    {
        printf("No hay lugar");

    }



}






int buscarIndiceLibre(eAbonado listado[], int tam)
{


    int index = -1;
    int i;

    for( i = 0; i< tam; i++)
    {
        if(listado[i].estado == LIBRE )

            index =i;


    }





    return index;


}

void inicializarEstado(eAbonado listado[], int tam)
{
    int i;
    for( i = 0; i< tam; i++)
    {


        listado[i].estado = LIBRE;

    }


}

void menuModificacion()
{

    printf("\n\t\t*******Menu de modificaciones*******\n1-Modificar Nombre\n2-Modificar apellido\n");

}

int cantidadDeAbonadosActivos(eAbonado listadoAbonados[],int tam)
{

    int cantAbonadosCargadas;
    for(int i = 0; i<tam; i++)
    {

        if(listadoAbonados[i].estado == OCUPADO )
        {
            cantAbonadosCargadas ++;

        }

    }

    return cantAbonadosCargadas;

}

int retornarMayor(int numeros[], int cant)
{

    int max;
    max = INT_MIN;
    for(int i = 0; i<cant; i++)
    {

        if(max < numeros[i])
        {

            max = numeros[i];
        }

    }
    return max;
}


